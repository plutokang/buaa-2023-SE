INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373061\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR c
SEMICN ;
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
IDENFR b
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR c
AND &&
IDENFR a
GRE >
IDENFR b
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "and right\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR c
AND &&
IDENFR a
GRE >
IDENFR b
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "and wrong\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
EQL ==
IDENFR c
OR ||
IDENFR a
LSS <
IDENFR b
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "or right\n"
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR a
NEQ !=
IDENFR c
OR ||
IDENFR a
LSS <
IDENFR b
RPARENT )
PRINTFTK printf
LPARENT (
STRCON "or wrong\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func1
LPARENT (
INTTK int
IDENFR array
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR func2
LPARENT (
INTTK int
IDENFR array
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
INTTK int
IDENFR array2
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
IDENFR array2
LBRACK [
IDENFR i
RBRACK ]
SEMICN ;
RBRACE }
RETURNTK return
INTCON 2
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR array
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 2
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR array
LBRACK [
IDENFR i
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
RETURNTK return
INTCON 2
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373061\n"
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR conarray1
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
COMMA ,
INTCON 4
COMMA ,
INTCON 5
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR conarray2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR array1
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
INTTK int
IDENFR array2
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
IDENFR array2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR a
COMMA ,
IDENFR b
SEMICN ;
IDENFR a
ASSIGN =
IDENFR array1
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR b
ASSIGN =
IDENFR array2
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
SEMICN ;
IDENFR func1
LPARENT (
IDENFR array1
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR array2
COMMA ,
IDENFR array1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR func1
LPARENT (
IDENFR array1
RPARENT )
RPARENT )
LBRACE {
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR func0
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "func returns int\n"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func1
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "func returns void\n"
RPARENT )
SEMICN ;
CONSTTK const
INTTK int
IDENFR temp
ASSIGN =
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "blockitem declares %d\n"
COMMA ,
IDENFR temp
RPARENT )
SEMICN ;
RBRACE }
VOIDTK void
IDENFR func2
LPARENT (
INTTK int
IDENFR num
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "read a num %d"
COMMA ,
IDENFR num
RPARENT )
SEMICN ;
RBRACE }
INTTK int
IDENFR func3
LPARENT (
INTTK int
IDENFR num1
COMMA ,
INTTK int
IDENFR num2
RPARENT )
LBRACE {
INTTK int
IDENFR ans
SEMICN ;
IDENFR ans
ASSIGN =
IDENFR num1
PLUS +
IDENFR num2
SEMICN ;
RETURNTK return
IDENFR ans
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
CONSTTK const
INTTK int
IDENFR a
ASSIGN =
INTCON 5
SEMICN ;
INTTK int
IDENFR b
SEMICN ;
INTTK int
IDENFR c
COMMA ,
IDENFR d
SEMICN ;
SEMICN ;
IDENFR c
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373061\n"
RPARENT )
SEMICN ;
IDENFR b
ASSIGN =
INTCON 5
SEMICN ;
IFTK if
LPARENT (
IDENFR b
GRE >
INTCON 5
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "bolck out of block\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
NOT !
LPARENT (
IDENFR b
EQL ==
INTCON 5
RPARENT )
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "if and else"
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "else"
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR b
GRE >
INTCON 0
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
EQL ==
INTCON 4
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR b
EQL ==
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
FORTK for
LPARENT (
IDENFR b
ASSIGN =
INTCON 3
SEMICN ;
IDENFR b
GRE >
INTCON 0
SEMICN ;
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
MINU -
INTCON 1
SEMICN ;
RBRACE }
IDENFR func0
LPARENT (
RPARENT )
SEMICN ;
IDENFR func1
LPARENT (
RPARENT )
SEMICN ;
IDENFR func2
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
IDENFR func3
LPARENT (
IDENFR b
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
LPARENT (
IDENFR a
MINU -
IDENFR b
RPARENT )
SEMICN ;
IDENFR d
ASSIGN =
IDENFR a
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
