INTTK int
IDENFR vara
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR vara2
ASSIGN =
PLUS +
INTCON 0
COMMA ,
IDENFR vara3
ASSIGN =
MINU -
INTCON 0
COMMA ,
IDENFR vara4
ASSIGN =
INTCON 3
MOD %
INTCON 1
COMMA ,
IDENFR varb
LBRACK [
INTCON 2
MINU -
INTCON 0
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
IDENFR varc
LBRACK [
INTCON 2
MULT *
INTCON 1
RBRACK ]
LBRACK [
INTCON 2
DIV /
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
COMMA ,
LBRACE {
INTCON 3
COMMA ,
INTCON 4
RBRACE }
RBRACE }
COMMA ,
IDENFR vara1
COMMA ,
IDENFR varb1
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR varc1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
CONSTTK const
INTTK int
IDENFR consta1
ASSIGN =
INTCON 0
SEMICN ;
CONSTTK const
INTTK int
IDENFR consta2
ASSIGN =
LPARENT (
INTCON 1
PLUS +
INTCON 1
RPARENT )
COMMA ,
IDENFR constb1
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
IDENFR constc1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
COMMA ,
LBRACE {
INTCON 1
COMMA ,
INTCON 1
RBRACE }
RBRACE }
SEMICN ;
INTTK int
IDENFR intf0
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
INTTK int
IDENFR intf1
LPARENT (
INTTK int
IDENFR funca
COMMA ,
INTTK int
IDENFR funcb
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
IDENFR funca
PLUS +
IDENFR funcb
SEMICN ;
RBRACE }
INTTK int
IDENFR intf2
LPARENT (
INTTK int
IDENFR funca2
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
IDENFR funca2
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR funca2
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
IDENFR intf3
LPARENT (
INTTK int
IDENFR funca3
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
IDENFR funca3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
PLUS +
IDENFR funca3
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidf0
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidf1
LPARENT (
INTTK int
IDENFR funca1
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidf2
LPARENT (
INTTK int
IDENFR funca2
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR voidf3
LPARENT (
INTTK int
IDENFR funca3
LBRACK [
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
RPARENT )
LBRACE {
INTTK int
IDENFR tmp
ASSIGN =
INTCON 0
SEMICN ;
IDENFR tmp
ASSIGN =
INTCON 1
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR j
ASSIGN =
INTCON 0
COMMA ,
IDENFR i
ASSIGN =
INTCON 0
COMMA ,
IDENFR vara
COMMA ,
IDENFR varb1
LBRACK [
INTCON 2
RBRACK ]
COMMA ,
IDENFR varc1
LBRACK [
INTCON 2
RBRACK ]
LBRACK [
INTCON 2
RBRACK ]
SEMICN ;
IDENFR vara1
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR varb1
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR varc1
LBRACK [
INTCON 0
RBRACK ]
LBRACK [
INTCON 0
RBRACK ]
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
LBRACE {
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
INTCON 5
SEMICN ;
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 0
AND &&
INTCON 1
GRE >
INTCON 0
AND &&
INTCON 0
LSS <
INTCON 1
AND &&
INTCON 0
LEQ <=
INTCON 1
AND &&
INTCON 1
GEQ >=
INTCON 0
AND &&
INTCON 1
RPARENT )
LBRACE {
RBRACE }
IFTK if
LPARENT (
INTCON 1
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "21373341\n"
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 1
OR ||
INTCON 1
EQL ==
INTCON 2
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR j
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 1
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IFTK if
LPARENT (
INTCON 0
AND &&
INTCON 1
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR j
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
IDENFR j
ASSIGN =
IDENFR j
PLUS +
INTCON 1
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 0
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
EQL ==
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR intf0
LPARENT (
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR intf1
LPARENT (
IDENFR i
COMMA ,
IDENFR j
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR intf2
LPARENT (
IDENFR varb1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR intf3
LPARENT (
IDENFR varc1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR intf3
LPARENT (
IDENFR varc1
RPARENT )
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373341\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373341\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "21373341"
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
